========
Planes
========

*Planes* is a very simple UAV simulator, desgined to aid in the development and
testing of UAV coordination mechanisms. The goal of the simulator is to acquire
and report statistics about the time it taskes for the UAVs to service a number
of requests. This time will vary depending on the strategy used by the planes, 
hence empirically showing which algorithm performs best on a given scenario.

A detailed explanation of the problem tackled by this simulator can be found in
Section 1 of the technical report at TechReport_.

.. _TechReport: http://bit.ly/

Development
===========

*Planes* is under heavy development. Thus, there are no binary releases of the
software. However, runnable jars can be generated by invoking the ``jar`` target
from the included *ant* ``build.xml`` file::

  cd /path/to/project
  ant jar

This command will create a ``dist`` folder, containing the compiled program's jar
file and the required libs.

Usage
=========

In order to test the algorithm's behavior in a particular scenario, the said
scenario must be first generated. This is, *Planes* does not randomly generate
scenarios when running. Instead, it includes a scenario generator that produces
scenario descriptions. These descriptions can be saved to a file and then
"solved" by *Planes* using any of the implemented strategies. You can get started
quickly by using the example problems found in the ``scenarios`` folder.

Simulator
---------

Once you have an example problem, the simulator can "solve" it using any of 
the inbuilt UAV coordination algorithms.  For instance, to solve the problem
``scenarios/short-hotspots.hson``, you can execute the following command::

  java -jar dist/planes.jar -g scenarios/short-hotspots.json

The ``-g`` option here tells the simulator to display a GUI of the simulation
(see below for more details about the GUI interface). If you remove it, the 
simulator will run in CLI mode, displaying just the progress of the simulation. 
This progress can also be disabled to run "batch" simulations by using the ``-q``
option. To see all available options, call the simulator without specifying 
any scenario to simulate::

  java -jar dist/planes.jar
  usage: planes [options] <problem>
    -d,--dump-settings     dump the default settings to standard output. This
                           can be used to prepare a settings file.
    -h,--help              show this help message.
    -o <setting=value>     override "setting" with "value".
    -q,--quiet             disable all output except for results and errors.
    -s,--settings <file>   Load settings from <file>.
    -t,--dry-run           Output only the resolved settings, but do not run
                           the simulation.

There are many parts of the simulator that can be customized for each run. These
settings include from the mechanism used by the planes to coordinate betweem
themselves (the algorithms we are testing!), to how the operator(s) choose to
which plane to submit each task.

To simplify the execution of many runs with similar configurations, the
simulator allows you to specify a settings file using the command line. That is,
you can instruct the simulator to use the settings described by <file> by running
it with a special parameter::

  java -jar dist/planes.jar problem -s <file>

or the longer form::

  java -jar dist/planes.jar problem --settings <file>

To learn about all available settings and prepare your own settings file, the
simulator includes a special "dump" option. Using this option, you can dump the
default settings (including their description) to a file. Later on, you just have
to specify that settings file when solving the instances::

  java -jar dist/planes.jar -d > custom.settings
  java -jar dist/planes.jar problem --setings=custom.settings

Customizing a settings file is very useful when running batches of simulations.
However, when trying things out you may want to override a setting without having
to modify it in the settings file (or without having to create a settings file at
all). In this situations, you can *override* a default setting by specifying it
directly in the command line. For instance, you could change the operator's
strategy by running the simulator as follows::

  java -jar dist/planes.jar problem -o operator-strategy=nearest


Graphical User Interface
------------------------

The simulator includes a simple GUI to visualize what is happening in the
simulation while it runs. The GUI has three distinct sections, as shown in this
figure:

..  image:: https://bitbucket.org/mpujol/planes/raw/master/img/sections.png
    :align: center
    :alt: Simulator's GUI screenshot.

First, there is a top bar that contains a few controls:

- The *Tasks* button toggles the displaying of all tasks (past, present and 
  future) in the simulation area. This is useful to quickly see how the tasks 
  are spatially distributed in this scenario.
- The *Speed* slider controls how fast to run the simulation. Setting it all the
  way to the left makes the simulation run at 1 tenth of a second of simulated
  time per second of real time. The maximum speed is capped by the maximum
  processing capability of your machine.
- The *Time* label shows the current simulation time in tenths of seconds.

Second, there is a bottom bar that displays some time-related information about
tasks. The whole bar is actually a histogram displaying how many tasks are
introduced at each point in time. Moreover, the histogram's bars are colored
according to which crisis period introduces those tasks. For example, the
leftmost (purple) peakshows that there is a crisis period at the beginning
of the simulation. Additionally, it shows that tasks from this crisis are
gaussian distributed along a short time period. The strong blue vertical line is
not related to the tasks. Instead, it marks the current point in time.

Third, there is the simulator's main display area, that depicts the simulated
world. In this area you can see the planes moving as they try to service tasks.
Each plane is painted in a different color, and surrounded by a circle that
represents its communication range. Likewise, the light blue circular area in 
the lower-center of the display represents the range of an operator, depicted
here as a big strong blue dot. Tasks are repented as smaller dots, painted in 
the same color than the plane that currently owns them. 

By default, the display shows the complete plan (sequence of requests to service)
of each plane, provided that the coordination algorithm computes such plan. When
the algorithm does not compute the full plan, only the next task to be serviced
is shown for each plane. The plans are visualized by connecting the plane to its
next request, then that request to the next one, and so on and so forth.

Additionally, you can click on any plane to *focus* on that plane. When a plane
is focused, all other planes and their tasks are painted grey, so that your
focused plane stands out of the rest. Additionally, you can no longer see the
full plans of other planes. Instead, you can see the focused plane's plan as
well as a trail of the last tasks it has serviced. When in focused mode, click
any empty space of the display to go back to the normal mode.


Generator
---------

At some point, you probably want to generate customized problems that represent
different scenarios. With *Planes*, you can generate such problems using the 
included problem generator::

  cd /path/to/project
  java -cp dist/planes.jar es.csic.iiia.planes.generator.Cli problem

This command generates an example scenario using defaults for all settings, and 
saves it to a file named ``problem``. You can obtain a commented copy of all the 
generator's settings by dumping the default generator configuration to a file::

  java -cp dist/planes.jar es.csic.iiia.planes.generator.Cli -d > generator.settings

This will create a text file ``generator.settings`` containing all the default 
settings plus a small explanation of their effects. At this point, you can edit 
any setting in the file using a text editor. Thereafter, you can generate scenarios 
using these custom settings by telling the generator to employ the (modified) 
settings file::

  java -cp dist/planes.jar es.csic.iiia.planes.generator.Cli problem -s generator.settings problem


Contact
=======

If you have any questions, problems or suggestions, please contact us at
`mpujol@iiia.csic.es`_.

.. _`mpujol@iiia.csic.es:wq`: mailto:mpujol@iiia.csic.es

